// src/shared/services/apiClient.js
import axios from "axios";

// NOTA IMPORTANTE:
// La carpeta `frontend/src/shared/src_api` es una copia espejo del c√≥digo del backend
// y se mantiene √∫nicamente con fines de an√°lisis y referencia.
// NO DEBE HABER ninguna importaci√≥n o conexi√≥n de c√≥digo a dicha carpeta.
// Todo el acceso a la API debe realizarse a trav√©s de este cliente (`apiClient`).

// Lee la URL base de la API desde las variables de entorno de Vite.
const API_BASE_URL = import.meta.env.VITE_API_URL;

// Creaci√≥n de la instancia de Axios con la configuraci√≥n base.
const apiClient = axios.create({
  baseURL: API_BASE_URL,
});

// --- Interceptor de Petici√≥n (Request) ---
// Se ejecuta ANTES de que cada petici√≥n sea enviada.
apiClient.interceptors.request.use(
  (config) => {
    // CORRECCI√ìN IMPORTANTE:
    // Busca el token primero en localStorage, si no lo encuentra, busca en sessionStorage.
    const token =
      localStorage.getItem("authToken") || sessionStorage.getItem("authToken");

    // Si encuentra un token, lo a√±ade a la cabecera 'Authorization'.
    if (token) {
      config.headers["Authorization"] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    // Si hay un error al configurar la petici√≥n, lo rechaza.
    return Promise.reject(error);
  }
);

// --- Interceptor de Respuesta (Response) ---
// Se ejecuta DESPU√âS de recibir una respuesta de la API.
apiClient.interceptors.response.use(
  (response) => response, // Si la respuesta es exitosa (ej: status 200), la retorna sin cambios.
  (error) => {
    // Si la respuesta es un error, entra aqu√≠.

    // Mostramos el detalle del error en la consola para an√°lisis.
    console.error("‚õî Error en la respuesta de la API:", error.response);

    // Verificamos si el error es un 401 (No Autorizado).
    if (error.response && error.response.status === 401) {
      console.log(
        "‚è∏Ô∏è Pausando la ejecuci√≥n por error 401. Revisa la consola y el estado de la aplicaci√≥n."
      );

      // L√çNEA CLAVE PARA DEPURAR:
      // Esto detendr√° la ejecuci√≥n del script si tienes las herramientas de desarrollador abiertas.
      // debugger; // Removed

      // La siguiente l√≥gica de limpieza y redirecci√≥n solo se ejecutar√°
      // despu√©s de que t√∫ reanudes la ejecuci√≥n manualmente en el navegador.
      console.log("üßπ Limpiando almacenamiento y redirigiendo a /login...");
      localStorage.removeItem("authToken");
      localStorage.removeItem("authUser");
      localStorage.removeItem("authPermissions");
      sessionStorage.clear();

      // Redirige al login solo si no estamos ya ah√≠.
      if (window.location.pathname !== "/login") {
        window.location.href = "/login";
      }
    }

    // Es crucial rechazar el error para que las llamadas originales (ej. en las p√°ginas)
    // tambi√©n puedan manejarlo si es necesario.
    return Promise.reject(error);
  }
);

export default apiClient;
